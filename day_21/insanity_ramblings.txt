
^^<<A

<AAv<AA>>^A

final:

v<<A>>^AA<vA<A>>^AAvAA<^A  !! longer

alternatives  (<<^^A)

v<<AA>^AA>A

<vA<AA>>^AAvA<^A>AAvA^A   !! shorter


// in layer 2 left is worse than down is worse than (up, right). (Because layer 3 will have to give these)
// Thus in layer 1, left inputs should be grouped together (the total # is always the same)
// Thus in layer 0, you never want to go up before going left if you have a choice.

// example:
// from A to 2
// ^<A   or    <^A
// <Av<A>>^A   or    v<<A>^A>A
// v<<A>>^Av<A<A>>^AvAA<^A>A    or
// v<A<AA>>^AvA<^A>AvA^A

// In layer 0, does the same hold for down?
// from 2 to A
// v>A  or   >vA
// v<A>A^A   or      vA<A>^A
// v<A<A>>^AvA^A<A>A     or
// v<A>^Av<<A>>^AvA<^A>A

!!!! the opposite holds! you never want to go right before going down if you have a choice.

// what about right and up? or left and down?
// from 2 to 6
// >^A    or    ^>A
// vA<^A>A  or  <Av>A^A
// v<A>^AV<<A>^A>AvA^A   or
// v<<A>>^Av<A>A^A<A>A

// from 6 to 2
// <vA   or    v<A
// v<<A>A^>A   or    v<A<A>>^A
// v<A<AA>>^AvA^A<Av>A^A    or
// v<A<A>>^AV<<A>>^AvAA<^A>A

fuck!!! here you prefer left before down.

// from 7 to A
// >>vvvA    or vv>>vA
// vAA<AAA>^A   or   <vAA>AA<A>^A  (already bad)
// v<A>^AAv<<<A>>^AAAvA<^A>A     or
// v<<A>A^>AAvA^AAv<<A>>^AvA<^A>A

prefer consecutive over alternating

left before down
left before up
down before right

    +---+---+---+
    | 7 | 8 | 9 |
    +---+---+---+
    | 4 | 5 | 6 |
    +---+---+---+
    | 1 | 2 | 3 |
    +---+---+---+
        | 0 | A |
        +---+---+

        +---+---+
        | ^ | A |
    +---+---+---+
    | < | v | > |
    +---+---+---+


-- PART TWO --
recall this neutral option.
// from 2 to 6
// >^A    or    ^>A
// vA<^A>A  or  <Av>A^A
// v<A>^AV<<A>^A>AvA^A   or
// v<<A>>^Av<A>A^A<A>A

// v<A<A>>^AvA<^A>Av<A<AA>>^AvA<^A>AvA^Av<A>^A<A>A
// v<A<AA>>^AvAA<^A>Av<A<A>>^AvA^A<A>Av<<A>>^AvAvA

with more layers, does the option remain neutral?
seems to be the case.

// brute forcing in code shows up is better than right unless 3 or 5 steps (tried up to 21)

// <AA
// v<<A>>^AA
// down, left, left, a, right, right, <^A>AA

// >>
// vAA
// v<A>^AA

// <^A
//
